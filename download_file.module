<?php
// $Id$

/**
 * @file
 * Module to direct download files or images.
 *
 * This module is for Drupal 6.x only.
 *
 * Module by: Matthieu Moratille
 * Mailto: mmoratille@yahoo.fr
 */

/**
 * Implementation of hook_perm().
 */
function download_file_perm() {
  return array('access direct download file');
}

/**
 * Implementation of hook_menu().
 */
function download_file_menu() {
  $items = array();

  $items['download/file/fid/%'] = array(
	'title'			   => 'Download file',
	'page callback'	   => 'download_file_direct_download',
	'page arguments'   => array(3),
	'access arguments' => array('access direct download file')
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function download_file_theme() {
  $theme = array(
    'download_file_formatter_direct_download' => array(
      'arguments' => array('element' => NULL),
      'file'	  => 'download_file.formatter.inc'
    ),
    'download_file_formatter_direct_download_icon' => array(
      'arguments' => array('element' => NULL),
      'file'	  => 'download_file.formatter.inc'
    ),
	'download_file_formatter_direct_download_accessible' => array(
      'arguments' => array('element' => NULL),
      'file'	  => 'download_file.formatter.inc'
    ),
	'download_file_formatter_direct_download_accessible_icon' => array(
      'arguments' => array('element' => NULL),
      'file'	  => 'download_file.formatter.inc'
    ),
	'download_file_direct_download_item' => array(
	  'arguments' => array('file' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	),
	'download_file_direct_download_icon_item' => array(
	  'arguments' => array('file' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	),
	'download_file_direct_download_item_accessible' => array(
	  'arguments' => array('file' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	),
	'download_file_direct_download_icon_item_accessible' => array(
	  'arguments' => array('file' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	),
	'download_file_detail_accessible' => array(
	  'arguments' => array('file' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	),
	'download_file_bytes_accessible' => array(
	  'arguments' => array('filesize' => NULL),
	  'file'	  => 'download_file.formatter.inc'
	)
  );

  return $theme;
}

/**
 * Page who forces the download of the file by changing the header.
 *
 * @param $fid
 *   The filefield identifier.
 */
function download_file_direct_download($fid) {
  $fid  = intval($fid);
  $file = field_file_load($fid);

  if (empty($fid) || empty($file) || !$file['status']) {
	return drupal_access_denied();
  }

  $file_name = $file['filename'];
  $headers   = array('Content-type: force-download',
                    'Content-disposition: attachment; filename="' . $file_name . '"',
                    'Content-Type: ' . $file['filemime'] . '; name="' . $file_name . '"',
                    'Content-Length: ' . $file['filesize'],
                    'Content-Transfer-Encoding: binary',
                    'Pragma: no-cache',
                    'Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
                    'Expires: 0',
                    'Accept-Ranges: bytes');

  if (in_array(-1, $headers)) {
	return drupal_access_denied();
  }

  if (count($headers)) {
	file_transfer($file['filepath'], $headers);
  }
}

/**
 * Get the URL to download file.
 *
 * @param $fid
 *   The filefield identifier.
 * @return
 *   An string containing the URL to direct download file.
 */
function download_file_url($fid) {
  return url('download/file/fid/' . $fid);
}

/**
 * Get the path to download file.
 *
 * @param $fid
 *   The filefield identifier.
 * @return
 *   An string containing the path to direct download file.
 */
function download_file_path($fid) {
  return 'download/file/fid/' . $fid;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function download_file_field_formatter_info() {
  return array(
	'direct_download' => array(
	  'label'			=> t('Direct download file'),
	  'field types'		=> array('filefield'),
	  'multiple values' =>  CONTENT_HANDLE_MODULE,
	  'description'		=> t('Displays a link to direct download the file.')
	),
	'direct_download_icon' => array(
	  'label'			=> t('Direct download file with the type icon'),
	  'field types'		=> array('filefield'),
	  'multiple values' =>  CONTENT_HANDLE_MODULE,
	  'description'		=> t('Displays a link to direct download the file with the type icon.')
	),
	'direct_download_accessible' => array(
	  'label'			=> t('Direct download file accessible'),
	  'field types'		=> array('filefield'),
	  'multiple values' =>  CONTENT_HANDLE_MODULE,
	  'description'		=> t('Displays a link accessible to direct download the file.')
	),
	'direct_download_accessible_icon' => array(
	  'label'			=> t('Direct download file accessible with the type icon'),
	  'field types'		=> array('filefield'),
	  'multiple values' =>  CONTENT_HANDLE_MODULE,
	  'description'		=> t('Displays a link accessible to direct download the file with the type icon.')
	)
  );
}

/**
 * Converts human readable file size (e.g. 10 MB, 200.20 GB) into bytes.
 *
 * @param $bytes
 *   File size in bytes.
 * @param $precision
 *   The precision after the decimal.
 * @return
 *   An array containing the formatted size and the unit.
 */
function download_file_format_bytes($bytes, $precision) {
  $units  = array(t('B'), t('KB'), t('MB'), t('GB'), t('TB'), t('PB'));
  $pow	  = floor(log($bytes) / log(1024));
  $output = sprintf('%.' . $precision . 'f ', ($bytes/pow(1024, floor($pow))));

  return array($output, $units[$pow]);
}

/**
 * Get the acronym of file extension.
 *
 * @param $file
 *   The file.
 * @return
 *   A string containing the formatted acronym of file extension.
 */
function download_file_format_extension($file) {
  $extension = pathinfo(strtoupper(check_plain($file['filename'])), PATHINFO_EXTENSION);

  switch ($file['filemime']) {
	// Word document types.
    case 'application/msword':
    case 'application/vnd.ms-word.document.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.text':
    case 'application/vnd.oasis.opendocument.text-template':
    case 'application/vnd.oasis.opendocument.text-master':
    case 'application/vnd.oasis.opendocument.text-web':
    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
    case 'application/vnd.wordperfect':
	  return '<acronym title="DOCument">DOC</acronym>';

    // Spreadsheet document types.
    case 'application/vnd.ms-excel':
    case 'application/vnd.ms-excel.sheet.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.spreadsheet':
    case 'application/vnd.oasis.opendocument.spreadsheet-template':
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
	  return '<acronym title="eXceL Spreadsheet">XLS</acronym>';

    // Presentation document types.
    case 'application/vnd.ms-powerpoint':
    case 'application/vnd.ms-powerpoint.presentation.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.presentation':
    case 'application/vnd.oasis.opendocument.presentation-template':
    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
	  return '<acronym title="PowerPoinT">PPT</acronym>';

	// Portable document types.
	case 'application/pdf':
	case 'application/x-pdf':
	case 'application/x-bzpdf':
	case 'application/x-gzpdf':
	  return '<acronym title="Portable Document Format">PDF</acronym>';

    // ZIP compressed archive types.
    case 'application/zip':
    case 'application/x-zip':
    case 'application/x-bzip':
    case 'application/x-compress':
    case 'application/x-gzip':
    case 'application/x-tgz':
	  return '<acronym title="Archive">ZIP</acronym>';

	// RAR compressed archive types.
    case 'application/x-rar':
    case 'application/x-bzip-compressed-tar':
    case 'application/x-tar':
    case 'application/x-tarz':
	  return '<acronym title="Roshal ARchive">RAR</acronym>';

	// 7z compressed archive types.
    case 'application/x-7z-compressed':
	  return '<acronym title="7-Zip Archive">7Z</acronym>';

	// Text file types.
    case 'text/plain':
	  return '<acronym title="TeXTe">TXT</acronym>';

	// CSV aliases.
	case 'text/csv':
	case 'text/comma-separated-values':
	  return '<acronym title="Comma-Separated Values">CSV</acronym>';

    // HTML aliases.
    case 'application/xhtml+xml':
	case 'text/html':
      return '<acronym title="HyperText Markup Language">HTML</acronym>';

	// XML aliases.
    case 'application/xml':
	case 'text/xml':
      return '<acronym title="eXtensible Markup Language">XML</acronym>';

	// RSS aliases.
	case 'application/rss+xml':
      return '<acronym title="Really Simple Syndication">RSS</acronym>';

	// JPEG images.
	case 'image/jpeg':
      return '<acronym title="Joint Photographic Experts Group">JPEG</acronym>';

	// PNG images.
	case 'image/png':
      return '<acronym title="Portable Network Graphics">PNG</acronym>';

	// GIF images.
	case 'image/gif':
      return '<acronym title="Graphics Interchange Format">GIF</acronym>';

	// RSS aliases.
	case 'application/rss+xml':
      return '<acronym title="Really Simple Syndication">RSS</acronym>';

    // Executable types.
    case 'application/x-macbinary':
    case 'application/x-ms-dos-executable':
    case 'application/x-pef-executable':
      return '<acronym title="Executable">EXE</acronym>';

	// QuickTime movie types.
    case 'video/quicktime':
      return '<acronym title="QuickTime MOVie">MOV</acronym>';

	// Windows audio types.
	case 'audio/vnd.wave':
	case 'audio/wav':
	case 'audio/wave':
	case 'audio/x-wav':
      return '<acronym title="WAVeform Audio File Format">WAV</acronym>';

	// MPEG audio types.
	case 'audio/mpeg':
	case 'audio/MPA':
	case 'audio/mpa-robust':
	  return '<acronym title="MPEG-1 Audio Layer 3">MP3</acronym>';

	default:
	  return $extension;
  }
}